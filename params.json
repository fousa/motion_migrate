{"name":"Motion Migrate","tagline":"Generate the Core Data model from your RubyMotion code. Never open XCode again!","body":"I love the [Nitron](https://github.com/mattgreen/nitron) gem created by [@mattgreen](https://github.com/mattgreen/). But I missed some features, and I really hate to open Xcode to create the Core Data model. So I created some rake tasks that helped me generate the Core Data model. Thanks to [@mattgreen](https://github.com/mattgreen/) for starting this in the 0.3 branch of the [Nitron](https://github.com/mattgreen/nitron) project.\r\n\r\nAnother reason why I wanted to create this gem is because I love using [Magical Record](https://github.com/magicalpanda/MagicalRecord). This is really a great way to handle Core Data, it's like a small layer on top of it. \r\n\r\nMost gems that want to --railsify-- Core Data don't make correct use of the different contexts as used by Core Data. So I wanted to be able to use Core Data as it should, by just generating the model. \r\n\r\nMaybe adding some simplicity in creating the relationships between models will be added later. But for now, generating the Core Data model is the main goal!\r\n\r\n## Installation\r\n\r\nThe installation is simple. Just add this line to you Gemfile:\r\n\r\n```ruby\r\ngem 'motion_migrate'\r\n```\r\n\r\nExecute:\r\n\r\n```\r\n$ bundle install\r\n```\r\n\r\nAnd BOOM, you're on your way!\r\n\r\n## Usage\r\n\r\nWith this gem you can set every option you can while using the Xcode modelling tool. I'm not going to describe every option because I assume RubyMotion developers know how Core Data works. Here is a short list of the available options for a property:\r\n\r\n- min\r\n- max\r\n- default\r\n- regex\r\n- external_storage\r\n- required\r\n- transient\r\n- indexed\r\n- spotlight\r\n- truth_file\r\n\r\nAnd of course here are the available options for the relationships (belongs to and has many):\r\n\r\n- required\r\n- deletion_rule\r\n- class_name\r\n- spotlight\r\n- truth_file\r\n- transient\r\n- min\r\n- max\r\n- inverse_of\r\n- ordered\r\n\r\nThe 'spec_project' is an example project with two models containing properties and relationships.\r\n\r\nBut the main question is how to generate this Core Data model. Well start by extending your models from MotionMigrate::Model. This class is extended from NSManagedObject so you're ready to continue with Core Data once the model is generated.\r\n\r\n```ruby\r\nclass Plane < MotionMigrate::Model\r\nend\r\n```\r\n\r\nNext define the properties:\r\n\r\n```ruby\r\nclass Plane < MotionMigrate::Model\r\n    property :name,  :string\r\n    property :multi, :boolean, :default => false\r\nend\r\n```\r\n\r\nThis will generate two properties, a name property and a multi property. To add some relationships to it, you can add a belongs\\_to -- rails-like-shizzle-- to the model.\r\n\r\n```ruby\r\nclass Plane < MotionMigrate::Model\r\n    property :name,  :string\r\n    property :multi, :boolean, :default => false\r\n\r\n    belongs_to :pilot, :class_name => \"Pilot\", \r\n                       :inverse_of => :planes\r\nend\r\n```\r\n\r\nDon't forget to add a has\\_many or belongs\\_to as a reverse relationship.\r\n\r\n```ruby\r\nclass Pilot < MotionMigrate::Model\r\n    has_many :planes, :class_name => \"Plane\",\r\n                      :inverse_of => :pilot\r\nend\r\n```\r\n\r\nThe relationships as defined above contain the minimal parameters you'll have to pass to the has\\_many or belongs\\_to.\r\n\r\nNow the most important part, migrating the model. Just run this command to generate the Core Data model from the current models.\r\n\r\n```\r\n$ rake db:migrate\r\n```\r\n\r\nYou can also revert to a previous version of the Core Data model by running: \r\n\r\n```\r\n$ rake db:rollback\r\n```\r\n\r\nYou can check out the other rake tasks by running:\r\n\r\n```\r\n$ rake -T\r\n```\r\n\r\n## Example\r\n\r\nBut for me, the most obvious part is an small example application that shows you how this gem is used. Check out the spec_project en run it so you can see it in action.\r\n\r\n## Todo\r\n\r\nThis is certainly not the end, still got a lot to do.\r\n\r\n- Better version generation. (shouldn't always generate a new version unless told to do so)\r\n- Clean up the utility methods.\r\n- Implement [mogenerator](https://github.com/rentzsch/mogenerator) functionality.\r\n- Add << functionatlity to the relationships in orde to add objects.\r\n- Try to handle relationships in a more Ruby on Railzy way.\r\n\r\n## License\r\n\r\nCopyright (c) 2013 Jelle Vandebeeck\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}